#if TARGET_OS_SIMULATOR

#if 0
#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.1 (swiftlang-1100.0.270.6 clang-1100.0.32.1)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="MFMSPushLite",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@protocol MFMSPushLiteDelegate;
@protocol MFMSPushLiteAppDelegateProxy;
@protocol UNUserNotificationCenterDelegate;
@class MFMSSendMessageResponse;

SWIFT_CLASS("_TtC12MFMSPushLite12MFMSPushLite")
@interface MFMSPushLite : NSObject
+ (NSString * _Nonnull)libVersion SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithDelegate:(id <MFMSPushLiteDelegate> _Nonnull)delegate OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic) BOOL autoRegisterForNotification;
@property (nonatomic) BOOL logEnable;
@property (nonatomic) BOOL showNetworkActivity;
@property (nonatomic, copy) NSString * _Nullable appPackagePostfix;
- (void)registerForRemoteNotification;
@property (nonatomic, readonly, copy) NSString * _Nullable deviceAddress;
@property (nonatomic, readonly, copy) NSString * _Nullable deviceUID;
@property (nonatomic, readonly, strong) id <MFMSPushLiteAppDelegateProxy> _Nonnull appDelegate;
@property (nonatomic, readonly, strong) id <UNUserNotificationCenterDelegate> _Nonnull notificationCenter SWIFT_AVAILABILITY(ios,introduced=10.0);
@property (nonatomic, copy) NSString * _Nullable appGroup;
- (void)start;
- (void)resetNewMessageCounterWithCompetionHandler:(void (^ _Nullable)(void))competionHandler errorHandler:(void (^ _Nullable)(NSString * _Nonnull))errorHandler;
- (void)markMessagesAsReadWithMessagesIds:(NSArray<NSString *> * _Nonnull)messagesIds onComplete:(void (^ _Nullable)(void))onComplete onError:(void (^ _Nullable)(NSString * _Nonnull))onError;
- (void)sendMessage:(NSString * _Nonnull)message isSystem:(BOOL)isSystem onComplete:(void (^ _Nullable)(MFMSSendMessageResponse * _Nonnull))onComplete onError:(void (^ _Nullable)(NSString * _Nonnull))onError;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@class UIUserNotificationSettings;

SWIFT_PROTOCOL("_TtP12MFMSPushLite28MFMSPushLiteAppDelegateProxy_")
@protocol MFMSPushLiteAppDelegateProxy
- (void)didRegisterForRemoteNotificationsWithDeviceToken:(NSData * _Nonnull)deviceToken;
- (void)didFailToRegisterForRemoteNotificationsWithError:(NSError * _Nonnull)error;
- (void)didReceiveRemoteNotification:(NSDictionary * _Nullable)userInfo fetchCompletionHandler:(void (^ _Nonnull)(UIBackgroundFetchResult))fetchCompletionHandler;
- (void)didReceiveRemoteNotification:(NSDictionary * _Nullable)userInfo;
- (void)didRegisterUserNotificationSettings:(UIUserNotificationSettings * _Nonnull)settings SWIFT_AVAILABILITY(ios,deprecated=10.0,message="Use didUpdateNotificationSettings");
- (void)didUpdateNotificationSettings;
@end

@protocol PushServerApiConfigDataSource;
@class PushNotificationMessage;

SWIFT_PROTOCOL("_TtP12MFMSPushLite20MFMSPushLiteDelegate_")
@protocol MFMSPushLiteDelegate
- (BOOL)isProductionWithPushApi:(MFMSPushLite * _Nonnull)pushApi SWIFT_WARN_UNUSED_RESULT;
@optional
- (id <PushServerApiConfigDataSource> _Nonnull)configWithPushApi:(MFMSPushLite * _Nonnull)pushApi SWIFT_WARN_UNUSED_RESULT;
- (void)onErrorWithPushApi:(MFMSPushLite * _Nonnull)pushApi error:(NSString * _Nonnull)error;
- (void)onDeviceAddressChangedWithPushApi:(MFMSPushLite * _Nonnull)pushApi deviceAddress:(NSString * _Nonnull)deviceAddress;
- (void)onPushMessagesReceivedWithPushApi:(MFMSPushLite * _Nonnull)pushApi messages:(NSArray<PushNotificationMessage *> * _Nonnull)messages;
@end

@class NSNumber;

SWIFT_CLASS("_TtC12MFMSPushLite23MFMSSendMessageResponse")
@interface MFMSSendMessageResponse : NSObject
@property (nonatomic, copy) NSString * _Nullable messageId;
@property (nonatomic, strong) NSNumber * _Nullable sentAt;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



@class PushServerAPIResponse;

SWIFT_CLASS("_TtC12MFMSPushLite23PushNotificationMessage")
@interface PushNotificationMessage : NSObject
/// Идентификатор сообщения <em>readonly</em>
@property (nonatomic, readonly, copy) NSString * _Nonnull messageId;
/// Время отправки (поступления на пуш платформу) <em>readonly</em>
@property (nonatomic, readonly) int64_t sentAt;
/// Флаг означающий что сообщение было прочитанно клиентом <em>read and write</em>
@property (nonatomic) BOOL read;
/// Сообщение было отправлено в безопасном режиме (с sessionKey) <em>readonly</em>
@property (nonatomic, readonly) BOOL secured;
/// Заголовок сообщения, отправляемый в облако <em>readonly</em>
@property (nonatomic, readonly, copy) NSString * _Nullable shortMessage;
/// Контент сообщения <em>readonly</em>
@property (nonatomic, readonly, copy) NSString * _Nullable fullMessage;
/// Сообщить на push платформу что сообщение было прочитанно, значение <em>read</em> выставляется в true и отправляется на push платформу.
/// /// [message markMessageAsRead:^(PushServerAPIResponse * _Nullable error) {
///
/// }];
///
/// \endcode\param complete callback успешного/не успешного завершения операции
///
///
/// returns:
/// self
- (PushNotificationMessage * _Nonnull)markMessageAsRead:(void (^ _Nullable)(PushServerAPIResponse * _Nullable))complete SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol PushServerAPIDelegate;

/// Основной класс <em>(singleton)</em> для работы с <em>PushServerAPI</em>.
/// Библиотека в <em>runtime</em> перехватывает вызовы методов в <em>AppDelegate</em> классе, необходимые для работы с <em>APNS</em> и отображением уведомлений на устройстве.
/// Если необходима ручная обработка событий, для этого предусмотрены соответсвующие “замыкания”.
/// <em>PushServerAPI</em> после установки <em>setEnabledPushNotificaions(true)</em>, библиотека запросит необходимые разрешения и данные устройства.
/// Разработчику необходимо добавить в <em>Info.plist</em> ключи соответствующих типов. Все параметры являются обезательными, при несоблюдение
/// требований к конфигурации, библиотека принудительно завершит приложение с ошибкой, это необходимо для отладки библиотеки во время внедрения.
/// Параметры конфигурации <em>Info.plist</em>:
/// <ul>
///   <li>
///     Ключ <em>PS_API_CONFIG</em>, тип <em>Dictionary</em>, значения:
///     <ul>
///       <li>
///         Ключ <em>PS_PROVIDER_UID</em>, тип <em>String</em>, уникальный идентификатор приложения.
///       </li>
///       <li>
///         Ключ <em>PS_URLS</em>, тип <em>Dictionary</em>, значения:
///         <ul>
///           <li>
///             Ключ <em><код сервера></em>, тип значения <em>String</em>, url сервера <a href="https://pushserver.ru">https://pushserver.ru</a>
///           </li>
///         </ul>
///       </li>
///       <li>
///         Ключ <em>PS_PRIMARY_URL</em>, тип String, значение - код из списка <em>PS_URLS</em>, например <em>pserver</em>
///       </li>
///       <li>
///         Ключ <em>PS_NEED_AUTOMATICALLY_GENERATE_DEVICE_UID</em>, тип <em>Boolean</em>, флаг необходимости сгенерировать уникальный идентифкатор устройства (<em>deviceUid</em>)
///         или он генерируется разработчиками, <em>YES</em> и <em>NO</em> соответственно.
///       </li>
///       <li>
///         Ключ <em>PUSH_MESSAGE_TYPE</em>, тип <em>String</em>, (по умолчанию отсутствует) поле, наличие значения которого приводит к тому, что при получении пуша библиотека проверяет наличие данного значиения в теле пуша, если такое значение обнаружено то пуш передаётся библиотекой в хендлер appPushMessagesReceived приложения без дальнейшей обработки пуш-уведомления.
///       </li>
///     </ul>
///   </li>
/// </ul>
/// <em>Системные требования: iOS8+, PushKit.framework</em>
/// <em>Важно:</em> Все замыкания(<em>callback</em>) вызываются в главном потоке (<em>Main Thread</em>).
SWIFT_CLASS("_TtC12MFMSPushLite13PushServerAPI")
@interface PushServerAPI : NSObject
+ (void)start;
+ (void)setDelegate:(id <PushServerAPIDelegate> _Nonnull)delegate;
+ (NSString * _Nonnull)libVersion SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL PUSH_API_LOG_ENABLE;)
+ (BOOL)PUSH_API_LOG_ENABLE SWIFT_WARN_UNUSED_RESULT;
+ (void)setPUSH_API_LOG_ENABLE:(BOOL)newValue;
/// Инициализация библиотеки PushServerAPI
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong, getter=default) PushServerAPI * _Nonnull default_;)
+ (PushServerAPI * _Nonnull)default SWIFT_WARN_UNUSED_RESULT;
/// Обработчик изменения <em>deviceAddress</em> устройства устройства.
@property (nonatomic, copy) void (^ _Nullable onDeviceAddressChanged)(NSString * _Nullable);
/// Обработчик получения новых уведомлений от пуш платформы
@property (nonatomic, copy) void (^ _Nullable onPushMessagesReceived)(NSArray<PushNotificationMessage *> * _Nonnull);
/// Обработчик получения новых уведомлений (НЕ от пуш платформы). Необходимо наличие флага PUSH_MESSAGE_TYPE и установленного в нём значения.
@property (nonatomic, copy) void (^ _Nullable appPushMessagesReceived)(NSArray<PushNotificationMessage *> * _Nonnull);
/// Обработчик информации о сообщениях прочитанных на другом устройстве.
@property (nonatomic, copy) void (^ _Nullable onPushMessagesWereRead)(NSArray<NSString *> * _Nonnull);
/// Обработчик информации о сообщениях прочитанных на другом устройстве.
@property (nonatomic, copy) void (^ _Nullable notificationsWereChanged)(BOOL);
@property (nonatomic, copy) void (^ _Nullable failureBlock)(NSString * _Nonnull);
/// DeviceAddress устройства.
@property (nonatomic, readonly, copy) NSString * _Nullable deviceAddress;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Уникальный идентификатор устройства. Генерируется автоматически если в <em>Info.plist</em> стоит флаг PS_NEED_AUTOMATICALLY_GENERATE_DEVICE_UID = YES, eсли PS_NEED_AUTOMATICALLY_GENERATE_DEVICE_UID = NO, тогда <em>deviceUid</em> необходимо выставить до вызова <em>setEnabledPushNotifications(true …)</em>
@property (nonatomic, copy) NSString * _Nullable deviceUid;
@end


@interface PushServerAPI (SWIFT_EXTENSION(MFMSPushLite))
/// Сброс счетчика сообщений.
/// /// [[PushServerAPI default] resetNewMessageCounter:^(PushServerAPIResponse * _Nullable error) {
///
/// }];
///
/// \endcode\param complete callback завершения сброса счетчика
///
- (void)resetNewMessageCounter:(void (^ _Nullable)(PushServerAPIResponse * _Nullable))complete;
@end

@class SendMessageResponse;

@interface PushServerAPI (SWIFT_EXTENSION(MFMSPushLite))
/// Метод отправки сообщений на платформу.
/// /// [[PushServerAPI default] messageSend:@"aaa" systemType:NO complete:^(SendMessageResponse * _Nullable response) {
///
/// }];
///
/// \endcode\param content тело сообщения
///
/// \param systemType true/false системное или не системное сообщение
///
/// \param complete callback о завершение операции
///
- (void)messageSend:(NSString * _Nullable)content systemType:(BOOL)systemType complete:(void (^ _Nullable)(SendMessageResponse * _Nullable))complete;
@end


@interface PushServerAPI (SWIFT_EXTENSION(MFMSPushLite))
/// Возвращает статус подписки на уведомления на push-платформе:
///
/// returns:
/// false Eсли подписка была выключена методом setSubscriptionEnabled, либо никогда не включалась
- (BOOL)isSubscriptionEnabled;
/// Включает/выключает подписку на уведомления на push-платформе
- (void)setSubscriptionEnabled:(BOOL)enabled;
@end


@interface PushServerAPI (SWIFT_EXTENSION(MFMSPushLite))
/// Запрос принудительной синхронизации.
/// Если есть прочитанные на другом устройстве сообщения, не полученные устройством сообщения, тогда отработают соответсвующие коллбэки:
/// <ul>
///   <li>
///     didPushMessagesReceived
///   </li>
///   <li>
///     didPushMessagesWereRead
///   </li>
/// </ul>
/// \param complete callback завершения операции
///
- (void)forceSync:(void (^ _Nullable)(PushServerAPIResponse * _Nullable))complete;
- (void)markMessageAsPushDelivered:(NSDictionary * _Nullable)userInfo complete:(void (^ _Nullable)(void))complete failure:(void (^ _Nullable)(NSString * _Nonnull))failure;
- (void)markMessageAsPushDelivered:(NSArray<NSString *> * _Nonnull)serverMessageId serverId:(NSString * _Nonnull)serverId complete:(void (^ _Nullable)(void))complete failure:(void (^ _Nullable)(NSString * _Nonnull))failure;
/// Метод помечает полученные сообщения как прочитанные пользователем.
/// /// [[PushServerAPI default] markMessagesAsRead:@[self.message.messageId] complete:^(PushServerAPIResponse * _Nullable error) {
///
/// }];
///
/// \endcode\param messagesIds массив Id  сообщений которые нужно пометить как прочитанные
///
/// \param complete self
///
- (void)markMessagesAsRead:(NSArray<NSString *> * _Nonnull)messagesIds complete:(void (^ _Nullable)(PushServerAPIResponse * _Nullable))complete;
@end

@class NSError;

@interface PushServerAPI (SWIFT_EXTENSION(MFMSPushLite))
- (void)didRegisterForRemoteNotificationsWithDeviceToken:(NSData * _Nonnull)deviceToken;
- (void)didReceiveRemoteNotification:(NSDictionary * _Nullable)userInfo;
- (void)didReceiveLocalNotification:(NSDictionary * _Nullable)userInfo;
- (void)didReceiveRemoteNotification:(NSDictionary * _Nullable)userInfo fetchCompletionHandler:(void (^ _Nonnull)(UIBackgroundFetchResult))fetchCompletionHandler;
- (void)handleActionWithIdentifier:(NSString * _Nullable)identifier userInfo:(NSDictionary * _Nonnull)userInfo completion:(void (^ _Nonnull)(void))completion;
- (void)handleActionWithIdentifier:(NSString * _Nullable)identifier userInfo:(NSDictionary * _Nonnull)userInfo responseInfo:(NSDictionary * _Nonnull)responseInfo completion:(void (^ _Nonnull)(void))completion;
- (void)didFailToRegisterForRemoteNotificationsWithError:(NSError * _Nonnull)error;
- (void)didRegisterUserNotificationSettings:(UIUserNotificationSettings * _Nonnull)settings SWIFT_AVAILABILITY(ios,deprecated=10.0,message="Use didUpdateNotificationSettings");
- (void)didUpdateNotificationSettings;
@end




@interface PushServerAPI (SWIFT_EXTENSION(MFMSPushLite))
+ (void)showNetworkActivity:(BOOL)show;
/// Метод для добавления суффикса для идентификатора приложения (используется в определении сертификата для отправки push-уведомлений, в случае если раньше был простой APNS-сертификат). Напр., com.xxx.voip, таким образом полный идентификатор должен совпадать с идентификатором voip-сертификата. Если метод не вызывать, будет использоваться идентификатор приложения (без суффикса). Метод необходимо вызывать в самом начале, где первый раз вызывается PushServerAPI. Напр., [[PushServerAPI default] addVoipSuffixToAppPackage: @”.voip”];.
- (void)addVoipSuffixToAppPackage:(NSString * _Nonnull)suffix;
@end


SWIFT_PROTOCOL("_TtP12MFMSPushLite21PushServerAPIDelegate_")
@protocol PushServerAPIDelegate
@optional
- (BOOL)isProductionWithPushServerAPI:(PushServerAPI * _Nonnull)pushServerAPI SWIFT_WARN_UNUSED_RESULT;
@required
- (id <PushServerApiConfigDataSource> _Nonnull)configWithPushServerAPI:(PushServerAPI * _Nonnull)pushServerAPI;
@optional
- (void)onErrorWithPushServerAPI:(PushServerAPI * _Nonnull)pushServerAPI error:(NSString * _Nonnull)error;
- (void)onDeviceAddressChangedWithPushServerAPI:(PushServerAPI * _Nonnull)pushServerAPI deviceAddress:(NSString * _Nonnull)deviceAddress;
- (void)onPushMessagesReceivedWithPushServerAPI:(PushServerAPI * _Nonnull)pushServerAPI messages:(NSArray<PushNotificationMessage *> * _Nonnull)messages;
@end


SWIFT_PROTOCOL("_TtP12MFMSPushLite23PushServerAPINEDelegate_")
@protocol PushServerAPINEDelegate <PushServerAPIDelegate>
- (NSString * _Nullable)deviceAddressWithPushServerAPI:(PushServerAPI * _Nonnull)pushServerAPI;
@end


/// <h1>PushServerAPIResponse</h1>
/// Стандартный response от сервера (Base Class).
SWIFT_CLASS("_TtC12MFMSPushLite21PushServerAPIResponse")
@interface PushServerAPIResponse : NSObject
/// Инициалиция объекта
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// При возникновение каких либо ошибок сетевого взаимодействия или некорректной передаче параметров методу,
/// <em>errorCode</em> выставляется больше <em>0</em>. Если ошибок нет, тогда либо равен <em>nil</em> либо <em>errorCode = 0</em>.
@property (nonatomic) int32_t errorCode;
/// Описание ошибки.
@property (nonatomic, copy) NSString * _Nullable errorDescription;
/// Стандартное описание объекта, наследника от <em>NSObject</em>
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Стандартное описание, для вывода информации с помощью <em>LLDB</em> дебагера.
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@end


SWIFT_PROTOCOL("_TtP12MFMSPushLite29PushServerApiConfigDataSource_")
@protocol PushServerApiConfigDataSource
@property (nonatomic, readonly, copy) NSString * _Nullable providerUid;
@property (nonatomic, readonly) BOOL needAutomaticallyGenerateDeviceUid;
@property (nonatomic, readonly, copy) NSString * _Nullable primaryUrlCode;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nonnull urls;
@end


SWIFT_CLASS("_TtC12MFMSPushLite19PushServerApiConfig")
@interface PushServerApiConfig : NSObject <PushServerApiConfigDataSource>
@property (nonatomic, copy) NSString * _Nullable providerUid;
@property (nonatomic) BOOL needAutomaticallyGenerateDeviceUid;
@property (nonatomic, copy) NSString * _Nullable primaryUrlCode;
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nonnull urls;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC12MFMSPushLite19SendMessageResponse")
@interface SendMessageResponse : PushServerAPIResponse
@property (nonatomic, copy) NSString * _Nullable messageId;
@property (nonatomic, strong) NSNumber * _Nullable sentAt;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#elif defined(__i386__) && __i386__
// Generated by Apple Swift version 5.1 (swiftlang-1100.0.270.6 clang-1100.0.32.1)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="MFMSPushLite",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@protocol MFMSPushLiteDelegate;
@protocol MFMSPushLiteAppDelegateProxy;
@protocol UNUserNotificationCenterDelegate;
@class MFMSSendMessageResponse;

SWIFT_CLASS("_TtC12MFMSPushLite12MFMSPushLite")
@interface MFMSPushLite : NSObject
+ (NSString * _Nonnull)libVersion SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithDelegate:(id <MFMSPushLiteDelegate> _Nonnull)delegate OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic) BOOL autoRegisterForNotification;
@property (nonatomic) BOOL logEnable;
@property (nonatomic) BOOL showNetworkActivity;
@property (nonatomic, copy) NSString * _Nullable appPackagePostfix;
- (void)registerForRemoteNotification;
@property (nonatomic, readonly, copy) NSString * _Nullable deviceAddress;
@property (nonatomic, readonly, copy) NSString * _Nullable deviceUID;
@property (nonatomic, readonly, strong) id <MFMSPushLiteAppDelegateProxy> _Nonnull appDelegate;
@property (nonatomic, readonly, strong) id <UNUserNotificationCenterDelegate> _Nonnull notificationCenter SWIFT_AVAILABILITY(ios,introduced=10.0);
@property (nonatomic, copy) NSString * _Nullable appGroup;
- (void)start;
- (void)resetNewMessageCounterWithCompetionHandler:(void (^ _Nullable)(void))competionHandler errorHandler:(void (^ _Nullable)(NSString * _Nonnull))errorHandler;
- (void)markMessagesAsReadWithMessagesIds:(NSArray<NSString *> * _Nonnull)messagesIds onComplete:(void (^ _Nullable)(void))onComplete onError:(void (^ _Nullable)(NSString * _Nonnull))onError;
- (void)sendMessage:(NSString * _Nonnull)message isSystem:(BOOL)isSystem onComplete:(void (^ _Nullable)(MFMSSendMessageResponse * _Nonnull))onComplete onError:(void (^ _Nullable)(NSString * _Nonnull))onError;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@class UIUserNotificationSettings;

SWIFT_PROTOCOL("_TtP12MFMSPushLite28MFMSPushLiteAppDelegateProxy_")
@protocol MFMSPushLiteAppDelegateProxy
- (void)didRegisterForRemoteNotificationsWithDeviceToken:(NSData * _Nonnull)deviceToken;
- (void)didFailToRegisterForRemoteNotificationsWithError:(NSError * _Nonnull)error;
- (void)didReceiveRemoteNotification:(NSDictionary * _Nullable)userInfo fetchCompletionHandler:(void (^ _Nonnull)(UIBackgroundFetchResult))fetchCompletionHandler;
- (void)didReceiveRemoteNotification:(NSDictionary * _Nullable)userInfo;
- (void)didRegisterUserNotificationSettings:(UIUserNotificationSettings * _Nonnull)settings SWIFT_AVAILABILITY(ios,deprecated=10.0,message="Use didUpdateNotificationSettings");
- (void)didUpdateNotificationSettings;
@end

@protocol PushServerApiConfigDataSource;
@class PushNotificationMessage;

SWIFT_PROTOCOL("_TtP12MFMSPushLite20MFMSPushLiteDelegate_")
@protocol MFMSPushLiteDelegate
- (BOOL)isProductionWithPushApi:(MFMSPushLite * _Nonnull)pushApi SWIFT_WARN_UNUSED_RESULT;
@optional
- (id <PushServerApiConfigDataSource> _Nonnull)configWithPushApi:(MFMSPushLite * _Nonnull)pushApi SWIFT_WARN_UNUSED_RESULT;
- (void)onErrorWithPushApi:(MFMSPushLite * _Nonnull)pushApi error:(NSString * _Nonnull)error;
- (void)onDeviceAddressChangedWithPushApi:(MFMSPushLite * _Nonnull)pushApi deviceAddress:(NSString * _Nonnull)deviceAddress;
- (void)onPushMessagesReceivedWithPushApi:(MFMSPushLite * _Nonnull)pushApi messages:(NSArray<PushNotificationMessage *> * _Nonnull)messages;
@end

@class NSNumber;

SWIFT_CLASS("_TtC12MFMSPushLite23MFMSSendMessageResponse")
@interface MFMSSendMessageResponse : NSObject
@property (nonatomic, copy) NSString * _Nullable messageId;
@property (nonatomic, strong) NSNumber * _Nullable sentAt;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



@class PushServerAPIResponse;

SWIFT_CLASS("_TtC12MFMSPushLite23PushNotificationMessage")
@interface PushNotificationMessage : NSObject
/// Идентификатор сообщения <em>readonly</em>
@property (nonatomic, readonly, copy) NSString * _Nonnull messageId;
/// Время отправки (поступления на пуш платформу) <em>readonly</em>
@property (nonatomic, readonly) int64_t sentAt;
/// Флаг означающий что сообщение было прочитанно клиентом <em>read and write</em>
@property (nonatomic) BOOL read;
/// Сообщение было отправлено в безопасном режиме (с sessionKey) <em>readonly</em>
@property (nonatomic, readonly) BOOL secured;
/// Заголовок сообщения, отправляемый в облако <em>readonly</em>
@property (nonatomic, readonly, copy) NSString * _Nullable shortMessage;
/// Контент сообщения <em>readonly</em>
@property (nonatomic, readonly, copy) NSString * _Nullable fullMessage;
/// Сообщить на push платформу что сообщение было прочитанно, значение <em>read</em> выставляется в true и отправляется на push платформу.
/// /// [message markMessageAsRead:^(PushServerAPIResponse * _Nullable error) {
///
/// }];
///
/// \endcode\param complete callback успешного/не успешного завершения операции
///
///
/// returns:
/// self
- (PushNotificationMessage * _Nonnull)markMessageAsRead:(void (^ _Nullable)(PushServerAPIResponse * _Nullable))complete SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol PushServerAPIDelegate;

/// Основной класс <em>(singleton)</em> для работы с <em>PushServerAPI</em>.
/// Библиотека в <em>runtime</em> перехватывает вызовы методов в <em>AppDelegate</em> классе, необходимые для работы с <em>APNS</em> и отображением уведомлений на устройстве.
/// Если необходима ручная обработка событий, для этого предусмотрены соответсвующие “замыкания”.
/// <em>PushServerAPI</em> после установки <em>setEnabledPushNotificaions(true)</em>, библиотека запросит необходимые разрешения и данные устройства.
/// Разработчику необходимо добавить в <em>Info.plist</em> ключи соответствующих типов. Все параметры являются обезательными, при несоблюдение
/// требований к конфигурации, библиотека принудительно завершит приложение с ошибкой, это необходимо для отладки библиотеки во время внедрения.
/// Параметры конфигурации <em>Info.plist</em>:
/// <ul>
///   <li>
///     Ключ <em>PS_API_CONFIG</em>, тип <em>Dictionary</em>, значения:
///     <ul>
///       <li>
///         Ключ <em>PS_PROVIDER_UID</em>, тип <em>String</em>, уникальный идентификатор приложения.
///       </li>
///       <li>
///         Ключ <em>PS_URLS</em>, тип <em>Dictionary</em>, значения:
///         <ul>
///           <li>
///             Ключ <em><код сервера></em>, тип значения <em>String</em>, url сервера <a href="https://pushserver.ru">https://pushserver.ru</a>
///           </li>
///         </ul>
///       </li>
///       <li>
///         Ключ <em>PS_PRIMARY_URL</em>, тип String, значение - код из списка <em>PS_URLS</em>, например <em>pserver</em>
///       </li>
///       <li>
///         Ключ <em>PS_NEED_AUTOMATICALLY_GENERATE_DEVICE_UID</em>, тип <em>Boolean</em>, флаг необходимости сгенерировать уникальный идентифкатор устройства (<em>deviceUid</em>)
///         или он генерируется разработчиками, <em>YES</em> и <em>NO</em> соответственно.
///       </li>
///       <li>
///         Ключ <em>PUSH_MESSAGE_TYPE</em>, тип <em>String</em>, (по умолчанию отсутствует) поле, наличие значения которого приводит к тому, что при получении пуша библиотека проверяет наличие данного значиения в теле пуша, если такое значение обнаружено то пуш передаётся библиотекой в хендлер appPushMessagesReceived приложения без дальнейшей обработки пуш-уведомления.
///       </li>
///     </ul>
///   </li>
/// </ul>
/// <em>Системные требования: iOS8+, PushKit.framework</em>
/// <em>Важно:</em> Все замыкания(<em>callback</em>) вызываются в главном потоке (<em>Main Thread</em>).
SWIFT_CLASS("_TtC12MFMSPushLite13PushServerAPI")
@interface PushServerAPI : NSObject
+ (void)start;
+ (void)setDelegate:(id <PushServerAPIDelegate> _Nonnull)delegate;
+ (NSString * _Nonnull)libVersion SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL PUSH_API_LOG_ENABLE;)
+ (BOOL)PUSH_API_LOG_ENABLE SWIFT_WARN_UNUSED_RESULT;
+ (void)setPUSH_API_LOG_ENABLE:(BOOL)newValue;
/// Инициализация библиотеки PushServerAPI
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong, getter=default) PushServerAPI * _Nonnull default_;)
+ (PushServerAPI * _Nonnull)default SWIFT_WARN_UNUSED_RESULT;
/// Обработчик изменения <em>deviceAddress</em> устройства устройства.
@property (nonatomic, copy) void (^ _Nullable onDeviceAddressChanged)(NSString * _Nullable);
/// Обработчик получения новых уведомлений от пуш платформы
@property (nonatomic, copy) void (^ _Nullable onPushMessagesReceived)(NSArray<PushNotificationMessage *> * _Nonnull);
/// Обработчик получения новых уведомлений (НЕ от пуш платформы). Необходимо наличие флага PUSH_MESSAGE_TYPE и установленного в нём значения.
@property (nonatomic, copy) void (^ _Nullable appPushMessagesReceived)(NSArray<PushNotificationMessage *> * _Nonnull);
/// Обработчик информации о сообщениях прочитанных на другом устройстве.
@property (nonatomic, copy) void (^ _Nullable onPushMessagesWereRead)(NSArray<NSString *> * _Nonnull);
/// Обработчик информации о сообщениях прочитанных на другом устройстве.
@property (nonatomic, copy) void (^ _Nullable notificationsWereChanged)(BOOL);
@property (nonatomic, copy) void (^ _Nullable failureBlock)(NSString * _Nonnull);
/// DeviceAddress устройства.
@property (nonatomic, readonly, copy) NSString * _Nullable deviceAddress;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Уникальный идентификатор устройства. Генерируется автоматически если в <em>Info.plist</em> стоит флаг PS_NEED_AUTOMATICALLY_GENERATE_DEVICE_UID = YES, eсли PS_NEED_AUTOMATICALLY_GENERATE_DEVICE_UID = NO, тогда <em>deviceUid</em> необходимо выставить до вызова <em>setEnabledPushNotifications(true …)</em>
@property (nonatomic, copy) NSString * _Nullable deviceUid;
@end


@interface PushServerAPI (SWIFT_EXTENSION(MFMSPushLite))
/// Сброс счетчика сообщений.
/// /// [[PushServerAPI default] resetNewMessageCounter:^(PushServerAPIResponse * _Nullable error) {
///
/// }];
///
/// \endcode\param complete callback завершения сброса счетчика
///
- (void)resetNewMessageCounter:(void (^ _Nullable)(PushServerAPIResponse * _Nullable))complete;
@end

@class SendMessageResponse;

@interface PushServerAPI (SWIFT_EXTENSION(MFMSPushLite))
/// Метод отправки сообщений на платформу.
/// /// [[PushServerAPI default] messageSend:@"aaa" systemType:NO complete:^(SendMessageResponse * _Nullable response) {
///
/// }];
///
/// \endcode\param content тело сообщения
///
/// \param systemType true/false системное или не системное сообщение
///
/// \param complete callback о завершение операции
///
- (void)messageSend:(NSString * _Nullable)content systemType:(BOOL)systemType complete:(void (^ _Nullable)(SendMessageResponse * _Nullable))complete;
@end


@interface PushServerAPI (SWIFT_EXTENSION(MFMSPushLite))
/// Возвращает статус подписки на уведомления на push-платформе:
///
/// returns:
/// false Eсли подписка была выключена методом setSubscriptionEnabled, либо никогда не включалась
- (BOOL)isSubscriptionEnabled;
/// Включает/выключает подписку на уведомления на push-платформе
- (void)setSubscriptionEnabled:(BOOL)enabled;
@end


@interface PushServerAPI (SWIFT_EXTENSION(MFMSPushLite))
/// Запрос принудительной синхронизации.
/// Если есть прочитанные на другом устройстве сообщения, не полученные устройством сообщения, тогда отработают соответсвующие коллбэки:
/// <ul>
///   <li>
///     didPushMessagesReceived
///   </li>
///   <li>
///     didPushMessagesWereRead
///   </li>
/// </ul>
/// \param complete callback завершения операции
///
- (void)forceSync:(void (^ _Nullable)(PushServerAPIResponse * _Nullable))complete;
- (void)markMessageAsPushDelivered:(NSDictionary * _Nullable)userInfo complete:(void (^ _Nullable)(void))complete failure:(void (^ _Nullable)(NSString * _Nonnull))failure;
- (void)markMessageAsPushDelivered:(NSArray<NSString *> * _Nonnull)serverMessageId serverId:(NSString * _Nonnull)serverId complete:(void (^ _Nullable)(void))complete failure:(void (^ _Nullable)(NSString * _Nonnull))failure;
/// Метод помечает полученные сообщения как прочитанные пользователем.
/// /// [[PushServerAPI default] markMessagesAsRead:@[self.message.messageId] complete:^(PushServerAPIResponse * _Nullable error) {
///
/// }];
///
/// \endcode\param messagesIds массив Id  сообщений которые нужно пометить как прочитанные
///
/// \param complete self
///
- (void)markMessagesAsRead:(NSArray<NSString *> * _Nonnull)messagesIds complete:(void (^ _Nullable)(PushServerAPIResponse * _Nullable))complete;
@end

@class NSError;

@interface PushServerAPI (SWIFT_EXTENSION(MFMSPushLite))
- (void)didRegisterForRemoteNotificationsWithDeviceToken:(NSData * _Nonnull)deviceToken;
- (void)didReceiveRemoteNotification:(NSDictionary * _Nullable)userInfo;
- (void)didReceiveLocalNotification:(NSDictionary * _Nullable)userInfo;
- (void)didReceiveRemoteNotification:(NSDictionary * _Nullable)userInfo fetchCompletionHandler:(void (^ _Nonnull)(UIBackgroundFetchResult))fetchCompletionHandler;
- (void)handleActionWithIdentifier:(NSString * _Nullable)identifier userInfo:(NSDictionary * _Nonnull)userInfo completion:(void (^ _Nonnull)(void))completion;
- (void)handleActionWithIdentifier:(NSString * _Nullable)identifier userInfo:(NSDictionary * _Nonnull)userInfo responseInfo:(NSDictionary * _Nonnull)responseInfo completion:(void (^ _Nonnull)(void))completion;
- (void)didFailToRegisterForRemoteNotificationsWithError:(NSError * _Nonnull)error;
- (void)didRegisterUserNotificationSettings:(UIUserNotificationSettings * _Nonnull)settings SWIFT_AVAILABILITY(ios,deprecated=10.0,message="Use didUpdateNotificationSettings");
- (void)didUpdateNotificationSettings;
@end




@interface PushServerAPI (SWIFT_EXTENSION(MFMSPushLite))
+ (void)showNetworkActivity:(BOOL)show;
/// Метод для добавления суффикса для идентификатора приложения (используется в определении сертификата для отправки push-уведомлений, в случае если раньше был простой APNS-сертификат). Напр., com.xxx.voip, таким образом полный идентификатор должен совпадать с идентификатором voip-сертификата. Если метод не вызывать, будет использоваться идентификатор приложения (без суффикса). Метод необходимо вызывать в самом начале, где первый раз вызывается PushServerAPI. Напр., [[PushServerAPI default] addVoipSuffixToAppPackage: @”.voip”];.
- (void)addVoipSuffixToAppPackage:(NSString * _Nonnull)suffix;
@end


SWIFT_PROTOCOL("_TtP12MFMSPushLite21PushServerAPIDelegate_")
@protocol PushServerAPIDelegate
@optional
- (BOOL)isProductionWithPushServerAPI:(PushServerAPI * _Nonnull)pushServerAPI SWIFT_WARN_UNUSED_RESULT;
@required
- (id <PushServerApiConfigDataSource> _Nonnull)configWithPushServerAPI:(PushServerAPI * _Nonnull)pushServerAPI;
@optional
- (void)onErrorWithPushServerAPI:(PushServerAPI * _Nonnull)pushServerAPI error:(NSString * _Nonnull)error;
- (void)onDeviceAddressChangedWithPushServerAPI:(PushServerAPI * _Nonnull)pushServerAPI deviceAddress:(NSString * _Nonnull)deviceAddress;
- (void)onPushMessagesReceivedWithPushServerAPI:(PushServerAPI * _Nonnull)pushServerAPI messages:(NSArray<PushNotificationMessage *> * _Nonnull)messages;
@end


SWIFT_PROTOCOL("_TtP12MFMSPushLite23PushServerAPINEDelegate_")
@protocol PushServerAPINEDelegate <PushServerAPIDelegate>
- (NSString * _Nullable)deviceAddressWithPushServerAPI:(PushServerAPI * _Nonnull)pushServerAPI;
@end


/// <h1>PushServerAPIResponse</h1>
/// Стандартный response от сервера (Base Class).
SWIFT_CLASS("_TtC12MFMSPushLite21PushServerAPIResponse")
@interface PushServerAPIResponse : NSObject
/// Инициалиция объекта
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// При возникновение каких либо ошибок сетевого взаимодействия или некорректной передаче параметров методу,
/// <em>errorCode</em> выставляется больше <em>0</em>. Если ошибок нет, тогда либо равен <em>nil</em> либо <em>errorCode = 0</em>.
@property (nonatomic) int32_t errorCode;
/// Описание ошибки.
@property (nonatomic, copy) NSString * _Nullable errorDescription;
/// Стандартное описание объекта, наследника от <em>NSObject</em>
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Стандартное описание, для вывода информации с помощью <em>LLDB</em> дебагера.
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@end


SWIFT_PROTOCOL("_TtP12MFMSPushLite29PushServerApiConfigDataSource_")
@protocol PushServerApiConfigDataSource
@property (nonatomic, readonly, copy) NSString * _Nullable providerUid;
@property (nonatomic, readonly) BOOL needAutomaticallyGenerateDeviceUid;
@property (nonatomic, readonly, copy) NSString * _Nullable primaryUrlCode;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nonnull urls;
@end


SWIFT_CLASS("_TtC12MFMSPushLite19PushServerApiConfig")
@interface PushServerApiConfig : NSObject <PushServerApiConfigDataSource>
@property (nonatomic, copy) NSString * _Nullable providerUid;
@property (nonatomic) BOOL needAutomaticallyGenerateDeviceUid;
@property (nonatomic, copy) NSString * _Nullable primaryUrlCode;
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nonnull urls;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC12MFMSPushLite19SendMessageResponse")
@interface SendMessageResponse : PushServerAPIResponse
@property (nonatomic, copy) NSString * _Nullable messageId;
@property (nonatomic, strong) NSNumber * _Nullable sentAt;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#endif

#else

#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.1 (swiftlang-1100.0.270.6 clang-1100.0.32.1)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="MFMSPushLite",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@protocol MFMSPushLiteDelegate;
@protocol MFMSPushLiteAppDelegateProxy;
@protocol UNUserNotificationCenterDelegate;
@class MFMSSendMessageResponse;

SWIFT_CLASS("_TtC12MFMSPushLite12MFMSPushLite")
@interface MFMSPushLite : NSObject
+ (NSString * _Nonnull)libVersion SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithDelegate:(id <MFMSPushLiteDelegate> _Nonnull)delegate OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic) BOOL autoRegisterForNotification;
@property (nonatomic) BOOL logEnable;
@property (nonatomic) BOOL showNetworkActivity;
@property (nonatomic, copy) NSString * _Nullable appPackagePostfix;
- (void)registerForRemoteNotification;
@property (nonatomic, readonly, copy) NSString * _Nullable deviceAddress;
@property (nonatomic, readonly, copy) NSString * _Nullable deviceUID;
@property (nonatomic, readonly, strong) id <MFMSPushLiteAppDelegateProxy> _Nonnull appDelegate;
@property (nonatomic, readonly, strong) id <UNUserNotificationCenterDelegate> _Nonnull notificationCenter SWIFT_AVAILABILITY(ios,introduced=10.0);
@property (nonatomic, copy) NSString * _Nullable appGroup;
- (void)start;
- (void)resetNewMessageCounterWithCompetionHandler:(void (^ _Nullable)(void))competionHandler errorHandler:(void (^ _Nullable)(NSString * _Nonnull))errorHandler;
- (void)markMessagesAsReadWithMessagesIds:(NSArray<NSString *> * _Nonnull)messagesIds onComplete:(void (^ _Nullable)(void))onComplete onError:(void (^ _Nullable)(NSString * _Nonnull))onError;
- (void)sendMessage:(NSString * _Nonnull)message isSystem:(BOOL)isSystem onComplete:(void (^ _Nullable)(MFMSSendMessageResponse * _Nonnull))onComplete onError:(void (^ _Nullable)(NSString * _Nonnull))onError;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@class UIUserNotificationSettings;

SWIFT_PROTOCOL("_TtP12MFMSPushLite28MFMSPushLiteAppDelegateProxy_")
@protocol MFMSPushLiteAppDelegateProxy
- (void)didRegisterForRemoteNotificationsWithDeviceToken:(NSData * _Nonnull)deviceToken;
- (void)didFailToRegisterForRemoteNotificationsWithError:(NSError * _Nonnull)error;
- (void)didReceiveRemoteNotification:(NSDictionary * _Nullable)userInfo fetchCompletionHandler:(void (^ _Nonnull)(UIBackgroundFetchResult))fetchCompletionHandler;
- (void)didReceiveRemoteNotification:(NSDictionary * _Nullable)userInfo;
- (void)didRegisterUserNotificationSettings:(UIUserNotificationSettings * _Nonnull)settings SWIFT_AVAILABILITY(ios,deprecated=10.0,message="Use didUpdateNotificationSettings");
- (void)didUpdateNotificationSettings;
@end

@protocol PushServerApiConfigDataSource;
@class PushNotificationMessage;

SWIFT_PROTOCOL("_TtP12MFMSPushLite20MFMSPushLiteDelegate_")
@protocol MFMSPushLiteDelegate
- (BOOL)isProductionWithPushApi:(MFMSPushLite * _Nonnull)pushApi SWIFT_WARN_UNUSED_RESULT;
@optional
- (id <PushServerApiConfigDataSource> _Nonnull)configWithPushApi:(MFMSPushLite * _Nonnull)pushApi SWIFT_WARN_UNUSED_RESULT;
- (void)onErrorWithPushApi:(MFMSPushLite * _Nonnull)pushApi error:(NSString * _Nonnull)error;
- (void)onDeviceAddressChangedWithPushApi:(MFMSPushLite * _Nonnull)pushApi deviceAddress:(NSString * _Nonnull)deviceAddress;
- (void)onPushMessagesReceivedWithPushApi:(MFMSPushLite * _Nonnull)pushApi messages:(NSArray<PushNotificationMessage *> * _Nonnull)messages;
@end

@class NSNumber;

SWIFT_CLASS("_TtC12MFMSPushLite23MFMSSendMessageResponse")
@interface MFMSSendMessageResponse : NSObject
@property (nonatomic, copy) NSString * _Nullable messageId;
@property (nonatomic, strong) NSNumber * _Nullable sentAt;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



@class PushServerAPIResponse;

SWIFT_CLASS("_TtC12MFMSPushLite23PushNotificationMessage")
@interface PushNotificationMessage : NSObject
/// Идентификатор сообщения <em>readonly</em>
@property (nonatomic, readonly, copy) NSString * _Nonnull messageId;
/// Время отправки (поступления на пуш платформу) <em>readonly</em>
@property (nonatomic, readonly) int64_t sentAt;
/// Флаг означающий что сообщение было прочитанно клиентом <em>read and write</em>
@property (nonatomic) BOOL read;
/// Сообщение было отправлено в безопасном режиме (с sessionKey) <em>readonly</em>
@property (nonatomic, readonly) BOOL secured;
/// Заголовок сообщения, отправляемый в облако <em>readonly</em>
@property (nonatomic, readonly, copy) NSString * _Nullable shortMessage;
/// Контент сообщения <em>readonly</em>
@property (nonatomic, readonly, copy) NSString * _Nullable fullMessage;
/// Сообщить на push платформу что сообщение было прочитанно, значение <em>read</em> выставляется в true и отправляется на push платформу.
/// /// [message markMessageAsRead:^(PushServerAPIResponse * _Nullable error) {
///
/// }];
///
/// \endcode\param complete callback успешного/не успешного завершения операции
///
///
/// returns:
/// self
- (PushNotificationMessage * _Nonnull)markMessageAsRead:(void (^ _Nullable)(PushServerAPIResponse * _Nullable))complete SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol PushServerAPIDelegate;

/// Основной класс <em>(singleton)</em> для работы с <em>PushServerAPI</em>.
/// Библиотека в <em>runtime</em> перехватывает вызовы методов в <em>AppDelegate</em> классе, необходимые для работы с <em>APNS</em> и отображением уведомлений на устройстве.
/// Если необходима ручная обработка событий, для этого предусмотрены соответсвующие “замыкания”.
/// <em>PushServerAPI</em> после установки <em>setEnabledPushNotificaions(true)</em>, библиотека запросит необходимые разрешения и данные устройства.
/// Разработчику необходимо добавить в <em>Info.plist</em> ключи соответствующих типов. Все параметры являются обезательными, при несоблюдение
/// требований к конфигурации, библиотека принудительно завершит приложение с ошибкой, это необходимо для отладки библиотеки во время внедрения.
/// Параметры конфигурации <em>Info.plist</em>:
/// <ul>
///   <li>
///     Ключ <em>PS_API_CONFIG</em>, тип <em>Dictionary</em>, значения:
///     <ul>
///       <li>
///         Ключ <em>PS_PROVIDER_UID</em>, тип <em>String</em>, уникальный идентификатор приложения.
///       </li>
///       <li>
///         Ключ <em>PS_URLS</em>, тип <em>Dictionary</em>, значения:
///         <ul>
///           <li>
///             Ключ <em><код сервера></em>, тип значения <em>String</em>, url сервера <a href="https://pushserver.ru">https://pushserver.ru</a>
///           </li>
///         </ul>
///       </li>
///       <li>
///         Ключ <em>PS_PRIMARY_URL</em>, тип String, значение - код из списка <em>PS_URLS</em>, например <em>pserver</em>
///       </li>
///       <li>
///         Ключ <em>PS_NEED_AUTOMATICALLY_GENERATE_DEVICE_UID</em>, тип <em>Boolean</em>, флаг необходимости сгенерировать уникальный идентифкатор устройства (<em>deviceUid</em>)
///         или он генерируется разработчиками, <em>YES</em> и <em>NO</em> соответственно.
///       </li>
///       <li>
///         Ключ <em>PUSH_MESSAGE_TYPE</em>, тип <em>String</em>, (по умолчанию отсутствует) поле, наличие значения которого приводит к тому, что при получении пуша библиотека проверяет наличие данного значиения в теле пуша, если такое значение обнаружено то пуш передаётся библиотекой в хендлер appPushMessagesReceived приложения без дальнейшей обработки пуш-уведомления.
///       </li>
///     </ul>
///   </li>
/// </ul>
/// <em>Системные требования: iOS8+, PushKit.framework</em>
/// <em>Важно:</em> Все замыкания(<em>callback</em>) вызываются в главном потоке (<em>Main Thread</em>).
SWIFT_CLASS("_TtC12MFMSPushLite13PushServerAPI")
@interface PushServerAPI : NSObject
+ (void)start;
+ (void)setDelegate:(id <PushServerAPIDelegate> _Nonnull)delegate;
+ (NSString * _Nonnull)libVersion SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL PUSH_API_LOG_ENABLE;)
+ (BOOL)PUSH_API_LOG_ENABLE SWIFT_WARN_UNUSED_RESULT;
+ (void)setPUSH_API_LOG_ENABLE:(BOOL)newValue;
/// Инициализация библиотеки PushServerAPI
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong, getter=default) PushServerAPI * _Nonnull default_;)
+ (PushServerAPI * _Nonnull)default SWIFT_WARN_UNUSED_RESULT;
/// Обработчик изменения <em>deviceAddress</em> устройства устройства.
@property (nonatomic, copy) void (^ _Nullable onDeviceAddressChanged)(NSString * _Nullable);
/// Обработчик получения новых уведомлений от пуш платформы
@property (nonatomic, copy) void (^ _Nullable onPushMessagesReceived)(NSArray<PushNotificationMessage *> * _Nonnull);
/// Обработчик получения новых уведомлений (НЕ от пуш платформы). Необходимо наличие флага PUSH_MESSAGE_TYPE и установленного в нём значения.
@property (nonatomic, copy) void (^ _Nullable appPushMessagesReceived)(NSArray<PushNotificationMessage *> * _Nonnull);
/// Обработчик информации о сообщениях прочитанных на другом устройстве.
@property (nonatomic, copy) void (^ _Nullable onPushMessagesWereRead)(NSArray<NSString *> * _Nonnull);
/// Обработчик информации о сообщениях прочитанных на другом устройстве.
@property (nonatomic, copy) void (^ _Nullable notificationsWereChanged)(BOOL);
@property (nonatomic, copy) void (^ _Nullable failureBlock)(NSString * _Nonnull);
/// DeviceAddress устройства.
@property (nonatomic, readonly, copy) NSString * _Nullable deviceAddress;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Уникальный идентификатор устройства. Генерируется автоматически если в <em>Info.plist</em> стоит флаг PS_NEED_AUTOMATICALLY_GENERATE_DEVICE_UID = YES, eсли PS_NEED_AUTOMATICALLY_GENERATE_DEVICE_UID = NO, тогда <em>deviceUid</em> необходимо выставить до вызова <em>setEnabledPushNotifications(true …)</em>
@property (nonatomic, copy) NSString * _Nullable deviceUid;
@end


@interface PushServerAPI (SWIFT_EXTENSION(MFMSPushLite))
/// Сброс счетчика сообщений.
/// /// [[PushServerAPI default] resetNewMessageCounter:^(PushServerAPIResponse * _Nullable error) {
///
/// }];
///
/// \endcode\param complete callback завершения сброса счетчика
///
- (void)resetNewMessageCounter:(void (^ _Nullable)(PushServerAPIResponse * _Nullable))complete;
@end

@class SendMessageResponse;

@interface PushServerAPI (SWIFT_EXTENSION(MFMSPushLite))
/// Метод отправки сообщений на платформу.
/// /// [[PushServerAPI default] messageSend:@"aaa" systemType:NO complete:^(SendMessageResponse * _Nullable response) {
///
/// }];
///
/// \endcode\param content тело сообщения
///
/// \param systemType true/false системное или не системное сообщение
///
/// \param complete callback о завершение операции
///
- (void)messageSend:(NSString * _Nullable)content systemType:(BOOL)systemType complete:(void (^ _Nullable)(SendMessageResponse * _Nullable))complete;
@end


@interface PushServerAPI (SWIFT_EXTENSION(MFMSPushLite))
/// Возвращает статус подписки на уведомления на push-платформе:
///
/// returns:
/// false Eсли подписка была выключена методом setSubscriptionEnabled, либо никогда не включалась
- (BOOL)isSubscriptionEnabled;
/// Включает/выключает подписку на уведомления на push-платформе
- (void)setSubscriptionEnabled:(BOOL)enabled;
@end


@interface PushServerAPI (SWIFT_EXTENSION(MFMSPushLite))
/// Запрос принудительной синхронизации.
/// Если есть прочитанные на другом устройстве сообщения, не полученные устройством сообщения, тогда отработают соответсвующие коллбэки:
/// <ul>
///   <li>
///     didPushMessagesReceived
///   </li>
///   <li>
///     didPushMessagesWereRead
///   </li>
/// </ul>
/// \param complete callback завершения операции
///
- (void)forceSync:(void (^ _Nullable)(PushServerAPIResponse * _Nullable))complete;
- (void)markMessageAsPushDelivered:(NSDictionary * _Nullable)userInfo complete:(void (^ _Nullable)(void))complete failure:(void (^ _Nullable)(NSString * _Nonnull))failure;
- (void)markMessageAsPushDelivered:(NSArray<NSString *> * _Nonnull)serverMessageId serverId:(NSString * _Nonnull)serverId complete:(void (^ _Nullable)(void))complete failure:(void (^ _Nullable)(NSString * _Nonnull))failure;
/// Метод помечает полученные сообщения как прочитанные пользователем.
/// /// [[PushServerAPI default] markMessagesAsRead:@[self.message.messageId] complete:^(PushServerAPIResponse * _Nullable error) {
///
/// }];
///
/// \endcode\param messagesIds массив Id  сообщений которые нужно пометить как прочитанные
///
/// \param complete self
///
- (void)markMessagesAsRead:(NSArray<NSString *> * _Nonnull)messagesIds complete:(void (^ _Nullable)(PushServerAPIResponse * _Nullable))complete;
@end

@class NSError;

@interface PushServerAPI (SWIFT_EXTENSION(MFMSPushLite))
- (void)didRegisterForRemoteNotificationsWithDeviceToken:(NSData * _Nonnull)deviceToken;
- (void)didReceiveRemoteNotification:(NSDictionary * _Nullable)userInfo;
- (void)didReceiveLocalNotification:(NSDictionary * _Nullable)userInfo;
- (void)didReceiveRemoteNotification:(NSDictionary * _Nullable)userInfo fetchCompletionHandler:(void (^ _Nonnull)(UIBackgroundFetchResult))fetchCompletionHandler;
- (void)handleActionWithIdentifier:(NSString * _Nullable)identifier userInfo:(NSDictionary * _Nonnull)userInfo completion:(void (^ _Nonnull)(void))completion;
- (void)handleActionWithIdentifier:(NSString * _Nullable)identifier userInfo:(NSDictionary * _Nonnull)userInfo responseInfo:(NSDictionary * _Nonnull)responseInfo completion:(void (^ _Nonnull)(void))completion;
- (void)didFailToRegisterForRemoteNotificationsWithError:(NSError * _Nonnull)error;
- (void)didRegisterUserNotificationSettings:(UIUserNotificationSettings * _Nonnull)settings SWIFT_AVAILABILITY(ios,deprecated=10.0,message="Use didUpdateNotificationSettings");
- (void)didUpdateNotificationSettings;
@end




@interface PushServerAPI (SWIFT_EXTENSION(MFMSPushLite))
+ (void)showNetworkActivity:(BOOL)show;
/// Метод для добавления суффикса для идентификатора приложения (используется в определении сертификата для отправки push-уведомлений, в случае если раньше был простой APNS-сертификат). Напр., com.xxx.voip, таким образом полный идентификатор должен совпадать с идентификатором voip-сертификата. Если метод не вызывать, будет использоваться идентификатор приложения (без суффикса). Метод необходимо вызывать в самом начале, где первый раз вызывается PushServerAPI. Напр., [[PushServerAPI default] addVoipSuffixToAppPackage: @”.voip”];.
- (void)addVoipSuffixToAppPackage:(NSString * _Nonnull)suffix;
@end


SWIFT_PROTOCOL("_TtP12MFMSPushLite21PushServerAPIDelegate_")
@protocol PushServerAPIDelegate
@optional
- (BOOL)isProductionWithPushServerAPI:(PushServerAPI * _Nonnull)pushServerAPI SWIFT_WARN_UNUSED_RESULT;
@required
- (id <PushServerApiConfigDataSource> _Nonnull)configWithPushServerAPI:(PushServerAPI * _Nonnull)pushServerAPI;
@optional
- (void)onErrorWithPushServerAPI:(PushServerAPI * _Nonnull)pushServerAPI error:(NSString * _Nonnull)error;
- (void)onDeviceAddressChangedWithPushServerAPI:(PushServerAPI * _Nonnull)pushServerAPI deviceAddress:(NSString * _Nonnull)deviceAddress;
- (void)onPushMessagesReceivedWithPushServerAPI:(PushServerAPI * _Nonnull)pushServerAPI messages:(NSArray<PushNotificationMessage *> * _Nonnull)messages;
@end


SWIFT_PROTOCOL("_TtP12MFMSPushLite23PushServerAPINEDelegate_")
@protocol PushServerAPINEDelegate <PushServerAPIDelegate>
- (NSString * _Nullable)deviceAddressWithPushServerAPI:(PushServerAPI * _Nonnull)pushServerAPI;
@end


/// <h1>PushServerAPIResponse</h1>
/// Стандартный response от сервера (Base Class).
SWIFT_CLASS("_TtC12MFMSPushLite21PushServerAPIResponse")
@interface PushServerAPIResponse : NSObject
/// Инициалиция объекта
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// При возникновение каких либо ошибок сетевого взаимодействия или некорректной передаче параметров методу,
/// <em>errorCode</em> выставляется больше <em>0</em>. Если ошибок нет, тогда либо равен <em>nil</em> либо <em>errorCode = 0</em>.
@property (nonatomic) int32_t errorCode;
/// Описание ошибки.
@property (nonatomic, copy) NSString * _Nullable errorDescription;
/// Стандартное описание объекта, наследника от <em>NSObject</em>
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Стандартное описание, для вывода информации с помощью <em>LLDB</em> дебагера.
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@end


SWIFT_PROTOCOL("_TtP12MFMSPushLite29PushServerApiConfigDataSource_")
@protocol PushServerApiConfigDataSource
@property (nonatomic, readonly, copy) NSString * _Nullable providerUid;
@property (nonatomic, readonly) BOOL needAutomaticallyGenerateDeviceUid;
@property (nonatomic, readonly, copy) NSString * _Nullable primaryUrlCode;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nonnull urls;
@end


SWIFT_CLASS("_TtC12MFMSPushLite19PushServerApiConfig")
@interface PushServerApiConfig : NSObject <PushServerApiConfigDataSource>
@property (nonatomic, copy) NSString * _Nullable providerUid;
@property (nonatomic) BOOL needAutomaticallyGenerateDeviceUid;
@property (nonatomic, copy) NSString * _Nullable primaryUrlCode;
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nonnull urls;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC12MFMSPushLite19SendMessageResponse")
@interface SendMessageResponse : PushServerAPIResponse
@property (nonatomic, copy) NSString * _Nullable messageId;
@property (nonatomic, strong) NSNumber * _Nullable sentAt;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#elif defined(__ARM_ARCH_7S__) && __ARM_ARCH_7S__
// Generated by Apple Swift version 5.1 (swiftlang-1100.0.270.6 clang-1100.0.32.1)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="MFMSPushLite",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@protocol MFMSPushLiteDelegate;
@protocol MFMSPushLiteAppDelegateProxy;
@protocol UNUserNotificationCenterDelegate;
@class MFMSSendMessageResponse;

SWIFT_CLASS("_TtC12MFMSPushLite12MFMSPushLite")
@interface MFMSPushLite : NSObject
+ (NSString * _Nonnull)libVersion SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithDelegate:(id <MFMSPushLiteDelegate> _Nonnull)delegate OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic) BOOL autoRegisterForNotification;
@property (nonatomic) BOOL logEnable;
@property (nonatomic) BOOL showNetworkActivity;
@property (nonatomic, copy) NSString * _Nullable appPackagePostfix;
- (void)registerForRemoteNotification;
@property (nonatomic, readonly, copy) NSString * _Nullable deviceAddress;
@property (nonatomic, readonly, copy) NSString * _Nullable deviceUID;
@property (nonatomic, readonly, strong) id <MFMSPushLiteAppDelegateProxy> _Nonnull appDelegate;
@property (nonatomic, readonly, strong) id <UNUserNotificationCenterDelegate> _Nonnull notificationCenter SWIFT_AVAILABILITY(ios,introduced=10.0);
@property (nonatomic, copy) NSString * _Nullable appGroup;
- (void)start;
- (void)resetNewMessageCounterWithCompetionHandler:(void (^ _Nullable)(void))competionHandler errorHandler:(void (^ _Nullable)(NSString * _Nonnull))errorHandler;
- (void)markMessagesAsReadWithMessagesIds:(NSArray<NSString *> * _Nonnull)messagesIds onComplete:(void (^ _Nullable)(void))onComplete onError:(void (^ _Nullable)(NSString * _Nonnull))onError;
- (void)sendMessage:(NSString * _Nonnull)message isSystem:(BOOL)isSystem onComplete:(void (^ _Nullable)(MFMSSendMessageResponse * _Nonnull))onComplete onError:(void (^ _Nullable)(NSString * _Nonnull))onError;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@class UIUserNotificationSettings;

SWIFT_PROTOCOL("_TtP12MFMSPushLite28MFMSPushLiteAppDelegateProxy_")
@protocol MFMSPushLiteAppDelegateProxy
- (void)didRegisterForRemoteNotificationsWithDeviceToken:(NSData * _Nonnull)deviceToken;
- (void)didFailToRegisterForRemoteNotificationsWithError:(NSError * _Nonnull)error;
- (void)didReceiveRemoteNotification:(NSDictionary * _Nullable)userInfo fetchCompletionHandler:(void (^ _Nonnull)(UIBackgroundFetchResult))fetchCompletionHandler;
- (void)didReceiveRemoteNotification:(NSDictionary * _Nullable)userInfo;
- (void)didRegisterUserNotificationSettings:(UIUserNotificationSettings * _Nonnull)settings SWIFT_AVAILABILITY(ios,deprecated=10.0,message="Use didUpdateNotificationSettings");
- (void)didUpdateNotificationSettings;
@end

@protocol PushServerApiConfigDataSource;
@class PushNotificationMessage;

SWIFT_PROTOCOL("_TtP12MFMSPushLite20MFMSPushLiteDelegate_")
@protocol MFMSPushLiteDelegate
- (BOOL)isProductionWithPushApi:(MFMSPushLite * _Nonnull)pushApi SWIFT_WARN_UNUSED_RESULT;
@optional
- (id <PushServerApiConfigDataSource> _Nonnull)configWithPushApi:(MFMSPushLite * _Nonnull)pushApi SWIFT_WARN_UNUSED_RESULT;
- (void)onErrorWithPushApi:(MFMSPushLite * _Nonnull)pushApi error:(NSString * _Nonnull)error;
- (void)onDeviceAddressChangedWithPushApi:(MFMSPushLite * _Nonnull)pushApi deviceAddress:(NSString * _Nonnull)deviceAddress;
- (void)onPushMessagesReceivedWithPushApi:(MFMSPushLite * _Nonnull)pushApi messages:(NSArray<PushNotificationMessage *> * _Nonnull)messages;
@end

@class NSNumber;

SWIFT_CLASS("_TtC12MFMSPushLite23MFMSSendMessageResponse")
@interface MFMSSendMessageResponse : NSObject
@property (nonatomic, copy) NSString * _Nullable messageId;
@property (nonatomic, strong) NSNumber * _Nullable sentAt;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



@class PushServerAPIResponse;

SWIFT_CLASS("_TtC12MFMSPushLite23PushNotificationMessage")
@interface PushNotificationMessage : NSObject
/// Идентификатор сообщения <em>readonly</em>
@property (nonatomic, readonly, copy) NSString * _Nonnull messageId;
/// Время отправки (поступления на пуш платформу) <em>readonly</em>
@property (nonatomic, readonly) int64_t sentAt;
/// Флаг означающий что сообщение было прочитанно клиентом <em>read and write</em>
@property (nonatomic) BOOL read;
/// Сообщение было отправлено в безопасном режиме (с sessionKey) <em>readonly</em>
@property (nonatomic, readonly) BOOL secured;
/// Заголовок сообщения, отправляемый в облако <em>readonly</em>
@property (nonatomic, readonly, copy) NSString * _Nullable shortMessage;
/// Контент сообщения <em>readonly</em>
@property (nonatomic, readonly, copy) NSString * _Nullable fullMessage;
/// Сообщить на push платформу что сообщение было прочитанно, значение <em>read</em> выставляется в true и отправляется на push платформу.
/// /// [message markMessageAsRead:^(PushServerAPIResponse * _Nullable error) {
///
/// }];
///
/// \endcode\param complete callback успешного/не успешного завершения операции
///
///
/// returns:
/// self
- (PushNotificationMessage * _Nonnull)markMessageAsRead:(void (^ _Nullable)(PushServerAPIResponse * _Nullable))complete SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol PushServerAPIDelegate;

/// Основной класс <em>(singleton)</em> для работы с <em>PushServerAPI</em>.
/// Библиотека в <em>runtime</em> перехватывает вызовы методов в <em>AppDelegate</em> классе, необходимые для работы с <em>APNS</em> и отображением уведомлений на устройстве.
/// Если необходима ручная обработка событий, для этого предусмотрены соответсвующие “замыкания”.
/// <em>PushServerAPI</em> после установки <em>setEnabledPushNotificaions(true)</em>, библиотека запросит необходимые разрешения и данные устройства.
/// Разработчику необходимо добавить в <em>Info.plist</em> ключи соответствующих типов. Все параметры являются обезательными, при несоблюдение
/// требований к конфигурации, библиотека принудительно завершит приложение с ошибкой, это необходимо для отладки библиотеки во время внедрения.
/// Параметры конфигурации <em>Info.plist</em>:
/// <ul>
///   <li>
///     Ключ <em>PS_API_CONFIG</em>, тип <em>Dictionary</em>, значения:
///     <ul>
///       <li>
///         Ключ <em>PS_PROVIDER_UID</em>, тип <em>String</em>, уникальный идентификатор приложения.
///       </li>
///       <li>
///         Ключ <em>PS_URLS</em>, тип <em>Dictionary</em>, значения:
///         <ul>
///           <li>
///             Ключ <em><код сервера></em>, тип значения <em>String</em>, url сервера <a href="https://pushserver.ru">https://pushserver.ru</a>
///           </li>
///         </ul>
///       </li>
///       <li>
///         Ключ <em>PS_PRIMARY_URL</em>, тип String, значение - код из списка <em>PS_URLS</em>, например <em>pserver</em>
///       </li>
///       <li>
///         Ключ <em>PS_NEED_AUTOMATICALLY_GENERATE_DEVICE_UID</em>, тип <em>Boolean</em>, флаг необходимости сгенерировать уникальный идентифкатор устройства (<em>deviceUid</em>)
///         или он генерируется разработчиками, <em>YES</em> и <em>NO</em> соответственно.
///       </li>
///       <li>
///         Ключ <em>PUSH_MESSAGE_TYPE</em>, тип <em>String</em>, (по умолчанию отсутствует) поле, наличие значения которого приводит к тому, что при получении пуша библиотека проверяет наличие данного значиения в теле пуша, если такое значение обнаружено то пуш передаётся библиотекой в хендлер appPushMessagesReceived приложения без дальнейшей обработки пуш-уведомления.
///       </li>
///     </ul>
///   </li>
/// </ul>
/// <em>Системные требования: iOS8+, PushKit.framework</em>
/// <em>Важно:</em> Все замыкания(<em>callback</em>) вызываются в главном потоке (<em>Main Thread</em>).
SWIFT_CLASS("_TtC12MFMSPushLite13PushServerAPI")
@interface PushServerAPI : NSObject
+ (void)start;
+ (void)setDelegate:(id <PushServerAPIDelegate> _Nonnull)delegate;
+ (NSString * _Nonnull)libVersion SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL PUSH_API_LOG_ENABLE;)
+ (BOOL)PUSH_API_LOG_ENABLE SWIFT_WARN_UNUSED_RESULT;
+ (void)setPUSH_API_LOG_ENABLE:(BOOL)newValue;
/// Инициализация библиотеки PushServerAPI
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong, getter=default) PushServerAPI * _Nonnull default_;)
+ (PushServerAPI * _Nonnull)default SWIFT_WARN_UNUSED_RESULT;
/// Обработчик изменения <em>deviceAddress</em> устройства устройства.
@property (nonatomic, copy) void (^ _Nullable onDeviceAddressChanged)(NSString * _Nullable);
/// Обработчик получения новых уведомлений от пуш платформы
@property (nonatomic, copy) void (^ _Nullable onPushMessagesReceived)(NSArray<PushNotificationMessage *> * _Nonnull);
/// Обработчик получения новых уведомлений (НЕ от пуш платформы). Необходимо наличие флага PUSH_MESSAGE_TYPE и установленного в нём значения.
@property (nonatomic, copy) void (^ _Nullable appPushMessagesReceived)(NSArray<PushNotificationMessage *> * _Nonnull);
/// Обработчик информации о сообщениях прочитанных на другом устройстве.
@property (nonatomic, copy) void (^ _Nullable onPushMessagesWereRead)(NSArray<NSString *> * _Nonnull);
/// Обработчик информации о сообщениях прочитанных на другом устройстве.
@property (nonatomic, copy) void (^ _Nullable notificationsWereChanged)(BOOL);
@property (nonatomic, copy) void (^ _Nullable failureBlock)(NSString * _Nonnull);
/// DeviceAddress устройства.
@property (nonatomic, readonly, copy) NSString * _Nullable deviceAddress;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Уникальный идентификатор устройства. Генерируется автоматически если в <em>Info.plist</em> стоит флаг PS_NEED_AUTOMATICALLY_GENERATE_DEVICE_UID = YES, eсли PS_NEED_AUTOMATICALLY_GENERATE_DEVICE_UID = NO, тогда <em>deviceUid</em> необходимо выставить до вызова <em>setEnabledPushNotifications(true …)</em>
@property (nonatomic, copy) NSString * _Nullable deviceUid;
@end


@interface PushServerAPI (SWIFT_EXTENSION(MFMSPushLite))
/// Сброс счетчика сообщений.
/// /// [[PushServerAPI default] resetNewMessageCounter:^(PushServerAPIResponse * _Nullable error) {
///
/// }];
///
/// \endcode\param complete callback завершения сброса счетчика
///
- (void)resetNewMessageCounter:(void (^ _Nullable)(PushServerAPIResponse * _Nullable))complete;
@end

@class SendMessageResponse;

@interface PushServerAPI (SWIFT_EXTENSION(MFMSPushLite))
/// Метод отправки сообщений на платформу.
/// /// [[PushServerAPI default] messageSend:@"aaa" systemType:NO complete:^(SendMessageResponse * _Nullable response) {
///
/// }];
///
/// \endcode\param content тело сообщения
///
/// \param systemType true/false системное или не системное сообщение
///
/// \param complete callback о завершение операции
///
- (void)messageSend:(NSString * _Nullable)content systemType:(BOOL)systemType complete:(void (^ _Nullable)(SendMessageResponse * _Nullable))complete;
@end


@interface PushServerAPI (SWIFT_EXTENSION(MFMSPushLite))
/// Возвращает статус подписки на уведомления на push-платформе:
///
/// returns:
/// false Eсли подписка была выключена методом setSubscriptionEnabled, либо никогда не включалась
- (BOOL)isSubscriptionEnabled;
/// Включает/выключает подписку на уведомления на push-платформе
- (void)setSubscriptionEnabled:(BOOL)enabled;
@end


@interface PushServerAPI (SWIFT_EXTENSION(MFMSPushLite))
/// Запрос принудительной синхронизации.
/// Если есть прочитанные на другом устройстве сообщения, не полученные устройством сообщения, тогда отработают соответсвующие коллбэки:
/// <ul>
///   <li>
///     didPushMessagesReceived
///   </li>
///   <li>
///     didPushMessagesWereRead
///   </li>
/// </ul>
/// \param complete callback завершения операции
///
- (void)forceSync:(void (^ _Nullable)(PushServerAPIResponse * _Nullable))complete;
- (void)markMessageAsPushDelivered:(NSDictionary * _Nullable)userInfo complete:(void (^ _Nullable)(void))complete failure:(void (^ _Nullable)(NSString * _Nonnull))failure;
- (void)markMessageAsPushDelivered:(NSArray<NSString *> * _Nonnull)serverMessageId serverId:(NSString * _Nonnull)serverId complete:(void (^ _Nullable)(void))complete failure:(void (^ _Nullable)(NSString * _Nonnull))failure;
/// Метод помечает полученные сообщения как прочитанные пользователем.
/// /// [[PushServerAPI default] markMessagesAsRead:@[self.message.messageId] complete:^(PushServerAPIResponse * _Nullable error) {
///
/// }];
///
/// \endcode\param messagesIds массив Id  сообщений которые нужно пометить как прочитанные
///
/// \param complete self
///
- (void)markMessagesAsRead:(NSArray<NSString *> * _Nonnull)messagesIds complete:(void (^ _Nullable)(PushServerAPIResponse * _Nullable))complete;
@end

@class NSError;

@interface PushServerAPI (SWIFT_EXTENSION(MFMSPushLite))
- (void)didRegisterForRemoteNotificationsWithDeviceToken:(NSData * _Nonnull)deviceToken;
- (void)didReceiveRemoteNotification:(NSDictionary * _Nullable)userInfo;
- (void)didReceiveLocalNotification:(NSDictionary * _Nullable)userInfo;
- (void)didReceiveRemoteNotification:(NSDictionary * _Nullable)userInfo fetchCompletionHandler:(void (^ _Nonnull)(UIBackgroundFetchResult))fetchCompletionHandler;
- (void)handleActionWithIdentifier:(NSString * _Nullable)identifier userInfo:(NSDictionary * _Nonnull)userInfo completion:(void (^ _Nonnull)(void))completion;
- (void)handleActionWithIdentifier:(NSString * _Nullable)identifier userInfo:(NSDictionary * _Nonnull)userInfo responseInfo:(NSDictionary * _Nonnull)responseInfo completion:(void (^ _Nonnull)(void))completion;
- (void)didFailToRegisterForRemoteNotificationsWithError:(NSError * _Nonnull)error;
- (void)didRegisterUserNotificationSettings:(UIUserNotificationSettings * _Nonnull)settings SWIFT_AVAILABILITY(ios,deprecated=10.0,message="Use didUpdateNotificationSettings");
- (void)didUpdateNotificationSettings;
@end




@interface PushServerAPI (SWIFT_EXTENSION(MFMSPushLite))
+ (void)showNetworkActivity:(BOOL)show;
/// Метод для добавления суффикса для идентификатора приложения (используется в определении сертификата для отправки push-уведомлений, в случае если раньше был простой APNS-сертификат). Напр., com.xxx.voip, таким образом полный идентификатор должен совпадать с идентификатором voip-сертификата. Если метод не вызывать, будет использоваться идентификатор приложения (без суффикса). Метод необходимо вызывать в самом начале, где первый раз вызывается PushServerAPI. Напр., [[PushServerAPI default] addVoipSuffixToAppPackage: @”.voip”];.
- (void)addVoipSuffixToAppPackage:(NSString * _Nonnull)suffix;
@end


SWIFT_PROTOCOL("_TtP12MFMSPushLite21PushServerAPIDelegate_")
@protocol PushServerAPIDelegate
@optional
- (BOOL)isProductionWithPushServerAPI:(PushServerAPI * _Nonnull)pushServerAPI SWIFT_WARN_UNUSED_RESULT;
@required
- (id <PushServerApiConfigDataSource> _Nonnull)configWithPushServerAPI:(PushServerAPI * _Nonnull)pushServerAPI;
@optional
- (void)onErrorWithPushServerAPI:(PushServerAPI * _Nonnull)pushServerAPI error:(NSString * _Nonnull)error;
- (void)onDeviceAddressChangedWithPushServerAPI:(PushServerAPI * _Nonnull)pushServerAPI deviceAddress:(NSString * _Nonnull)deviceAddress;
- (void)onPushMessagesReceivedWithPushServerAPI:(PushServerAPI * _Nonnull)pushServerAPI messages:(NSArray<PushNotificationMessage *> * _Nonnull)messages;
@end


SWIFT_PROTOCOL("_TtP12MFMSPushLite23PushServerAPINEDelegate_")
@protocol PushServerAPINEDelegate <PushServerAPIDelegate>
- (NSString * _Nullable)deviceAddressWithPushServerAPI:(PushServerAPI * _Nonnull)pushServerAPI;
@end


/// <h1>PushServerAPIResponse</h1>
/// Стандартный response от сервера (Base Class).
SWIFT_CLASS("_TtC12MFMSPushLite21PushServerAPIResponse")
@interface PushServerAPIResponse : NSObject
/// Инициалиция объекта
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// При возникновение каких либо ошибок сетевого взаимодействия или некорректной передаче параметров методу,
/// <em>errorCode</em> выставляется больше <em>0</em>. Если ошибок нет, тогда либо равен <em>nil</em> либо <em>errorCode = 0</em>.
@property (nonatomic) int32_t errorCode;
/// Описание ошибки.
@property (nonatomic, copy) NSString * _Nullable errorDescription;
/// Стандартное описание объекта, наследника от <em>NSObject</em>
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Стандартное описание, для вывода информации с помощью <em>LLDB</em> дебагера.
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@end


SWIFT_PROTOCOL("_TtP12MFMSPushLite29PushServerApiConfigDataSource_")
@protocol PushServerApiConfigDataSource
@property (nonatomic, readonly, copy) NSString * _Nullable providerUid;
@property (nonatomic, readonly) BOOL needAutomaticallyGenerateDeviceUid;
@property (nonatomic, readonly, copy) NSString * _Nullable primaryUrlCode;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nonnull urls;
@end


SWIFT_CLASS("_TtC12MFMSPushLite19PushServerApiConfig")
@interface PushServerApiConfig : NSObject <PushServerApiConfigDataSource>
@property (nonatomic, copy) NSString * _Nullable providerUid;
@property (nonatomic) BOOL needAutomaticallyGenerateDeviceUid;
@property (nonatomic, copy) NSString * _Nullable primaryUrlCode;
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nonnull urls;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC12MFMSPushLite19SendMessageResponse")
@interface SendMessageResponse : PushServerAPIResponse
@property (nonatomic, copy) NSString * _Nullable messageId;
@property (nonatomic, strong) NSNumber * _Nullable sentAt;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#elif defined(__ARM_ARCH_7A__) && __ARM_ARCH_7A__
// Generated by Apple Swift version 5.1 (swiftlang-1100.0.270.6 clang-1100.0.32.1)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="MFMSPushLite",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@protocol MFMSPushLiteDelegate;
@protocol MFMSPushLiteAppDelegateProxy;
@protocol UNUserNotificationCenterDelegate;
@class MFMSSendMessageResponse;

SWIFT_CLASS("_TtC12MFMSPushLite12MFMSPushLite")
@interface MFMSPushLite : NSObject
+ (NSString * _Nonnull)libVersion SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithDelegate:(id <MFMSPushLiteDelegate> _Nonnull)delegate OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic) BOOL autoRegisterForNotification;
@property (nonatomic) BOOL logEnable;
@property (nonatomic) BOOL showNetworkActivity;
@property (nonatomic, copy) NSString * _Nullable appPackagePostfix;
- (void)registerForRemoteNotification;
@property (nonatomic, readonly, copy) NSString * _Nullable deviceAddress;
@property (nonatomic, readonly, copy) NSString * _Nullable deviceUID;
@property (nonatomic, readonly, strong) id <MFMSPushLiteAppDelegateProxy> _Nonnull appDelegate;
@property (nonatomic, readonly, strong) id <UNUserNotificationCenterDelegate> _Nonnull notificationCenter SWIFT_AVAILABILITY(ios,introduced=10.0);
@property (nonatomic, copy) NSString * _Nullable appGroup;
- (void)start;
- (void)resetNewMessageCounterWithCompetionHandler:(void (^ _Nullable)(void))competionHandler errorHandler:(void (^ _Nullable)(NSString * _Nonnull))errorHandler;
- (void)markMessagesAsReadWithMessagesIds:(NSArray<NSString *> * _Nonnull)messagesIds onComplete:(void (^ _Nullable)(void))onComplete onError:(void (^ _Nullable)(NSString * _Nonnull))onError;
- (void)sendMessage:(NSString * _Nonnull)message isSystem:(BOOL)isSystem onComplete:(void (^ _Nullable)(MFMSSendMessageResponse * _Nonnull))onComplete onError:(void (^ _Nullable)(NSString * _Nonnull))onError;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@class UIUserNotificationSettings;

SWIFT_PROTOCOL("_TtP12MFMSPushLite28MFMSPushLiteAppDelegateProxy_")
@protocol MFMSPushLiteAppDelegateProxy
- (void)didRegisterForRemoteNotificationsWithDeviceToken:(NSData * _Nonnull)deviceToken;
- (void)didFailToRegisterForRemoteNotificationsWithError:(NSError * _Nonnull)error;
- (void)didReceiveRemoteNotification:(NSDictionary * _Nullable)userInfo fetchCompletionHandler:(void (^ _Nonnull)(UIBackgroundFetchResult))fetchCompletionHandler;
- (void)didReceiveRemoteNotification:(NSDictionary * _Nullable)userInfo;
- (void)didRegisterUserNotificationSettings:(UIUserNotificationSettings * _Nonnull)settings SWIFT_AVAILABILITY(ios,deprecated=10.0,message="Use didUpdateNotificationSettings");
- (void)didUpdateNotificationSettings;
@end

@protocol PushServerApiConfigDataSource;
@class PushNotificationMessage;

SWIFT_PROTOCOL("_TtP12MFMSPushLite20MFMSPushLiteDelegate_")
@protocol MFMSPushLiteDelegate
- (BOOL)isProductionWithPushApi:(MFMSPushLite * _Nonnull)pushApi SWIFT_WARN_UNUSED_RESULT;
@optional
- (id <PushServerApiConfigDataSource> _Nonnull)configWithPushApi:(MFMSPushLite * _Nonnull)pushApi SWIFT_WARN_UNUSED_RESULT;
- (void)onErrorWithPushApi:(MFMSPushLite * _Nonnull)pushApi error:(NSString * _Nonnull)error;
- (void)onDeviceAddressChangedWithPushApi:(MFMSPushLite * _Nonnull)pushApi deviceAddress:(NSString * _Nonnull)deviceAddress;
- (void)onPushMessagesReceivedWithPushApi:(MFMSPushLite * _Nonnull)pushApi messages:(NSArray<PushNotificationMessage *> * _Nonnull)messages;
@end

@class NSNumber;

SWIFT_CLASS("_TtC12MFMSPushLite23MFMSSendMessageResponse")
@interface MFMSSendMessageResponse : NSObject
@property (nonatomic, copy) NSString * _Nullable messageId;
@property (nonatomic, strong) NSNumber * _Nullable sentAt;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



@class PushServerAPIResponse;

SWIFT_CLASS("_TtC12MFMSPushLite23PushNotificationMessage")
@interface PushNotificationMessage : NSObject
/// Идентификатор сообщения <em>readonly</em>
@property (nonatomic, readonly, copy) NSString * _Nonnull messageId;
/// Время отправки (поступления на пуш платформу) <em>readonly</em>
@property (nonatomic, readonly) int64_t sentAt;
/// Флаг означающий что сообщение было прочитанно клиентом <em>read and write</em>
@property (nonatomic) BOOL read;
/// Сообщение было отправлено в безопасном режиме (с sessionKey) <em>readonly</em>
@property (nonatomic, readonly) BOOL secured;
/// Заголовок сообщения, отправляемый в облако <em>readonly</em>
@property (nonatomic, readonly, copy) NSString * _Nullable shortMessage;
/// Контент сообщения <em>readonly</em>
@property (nonatomic, readonly, copy) NSString * _Nullable fullMessage;
/// Сообщить на push платформу что сообщение было прочитанно, значение <em>read</em> выставляется в true и отправляется на push платформу.
/// /// [message markMessageAsRead:^(PushServerAPIResponse * _Nullable error) {
///
/// }];
///
/// \endcode\param complete callback успешного/не успешного завершения операции
///
///
/// returns:
/// self
- (PushNotificationMessage * _Nonnull)markMessageAsRead:(void (^ _Nullable)(PushServerAPIResponse * _Nullable))complete SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol PushServerAPIDelegate;

/// Основной класс <em>(singleton)</em> для работы с <em>PushServerAPI</em>.
/// Библиотека в <em>runtime</em> перехватывает вызовы методов в <em>AppDelegate</em> классе, необходимые для работы с <em>APNS</em> и отображением уведомлений на устройстве.
/// Если необходима ручная обработка событий, для этого предусмотрены соответсвующие “замыкания”.
/// <em>PushServerAPI</em> после установки <em>setEnabledPushNotificaions(true)</em>, библиотека запросит необходимые разрешения и данные устройства.
/// Разработчику необходимо добавить в <em>Info.plist</em> ключи соответствующих типов. Все параметры являются обезательными, при несоблюдение
/// требований к конфигурации, библиотека принудительно завершит приложение с ошибкой, это необходимо для отладки библиотеки во время внедрения.
/// Параметры конфигурации <em>Info.plist</em>:
/// <ul>
///   <li>
///     Ключ <em>PS_API_CONFIG</em>, тип <em>Dictionary</em>, значения:
///     <ul>
///       <li>
///         Ключ <em>PS_PROVIDER_UID</em>, тип <em>String</em>, уникальный идентификатор приложения.
///       </li>
///       <li>
///         Ключ <em>PS_URLS</em>, тип <em>Dictionary</em>, значения:
///         <ul>
///           <li>
///             Ключ <em><код сервера></em>, тип значения <em>String</em>, url сервера <a href="https://pushserver.ru">https://pushserver.ru</a>
///           </li>
///         </ul>
///       </li>
///       <li>
///         Ключ <em>PS_PRIMARY_URL</em>, тип String, значение - код из списка <em>PS_URLS</em>, например <em>pserver</em>
///       </li>
///       <li>
///         Ключ <em>PS_NEED_AUTOMATICALLY_GENERATE_DEVICE_UID</em>, тип <em>Boolean</em>, флаг необходимости сгенерировать уникальный идентифкатор устройства (<em>deviceUid</em>)
///         или он генерируется разработчиками, <em>YES</em> и <em>NO</em> соответственно.
///       </li>
///       <li>
///         Ключ <em>PUSH_MESSAGE_TYPE</em>, тип <em>String</em>, (по умолчанию отсутствует) поле, наличие значения которого приводит к тому, что при получении пуша библиотека проверяет наличие данного значиения в теле пуша, если такое значение обнаружено то пуш передаётся библиотекой в хендлер appPushMessagesReceived приложения без дальнейшей обработки пуш-уведомления.
///       </li>
///     </ul>
///   </li>
/// </ul>
/// <em>Системные требования: iOS8+, PushKit.framework</em>
/// <em>Важно:</em> Все замыкания(<em>callback</em>) вызываются в главном потоке (<em>Main Thread</em>).
SWIFT_CLASS("_TtC12MFMSPushLite13PushServerAPI")
@interface PushServerAPI : NSObject
+ (void)start;
+ (void)setDelegate:(id <PushServerAPIDelegate> _Nonnull)delegate;
+ (NSString * _Nonnull)libVersion SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL PUSH_API_LOG_ENABLE;)
+ (BOOL)PUSH_API_LOG_ENABLE SWIFT_WARN_UNUSED_RESULT;
+ (void)setPUSH_API_LOG_ENABLE:(BOOL)newValue;
/// Инициализация библиотеки PushServerAPI
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong, getter=default) PushServerAPI * _Nonnull default_;)
+ (PushServerAPI * _Nonnull)default SWIFT_WARN_UNUSED_RESULT;
/// Обработчик изменения <em>deviceAddress</em> устройства устройства.
@property (nonatomic, copy) void (^ _Nullable onDeviceAddressChanged)(NSString * _Nullable);
/// Обработчик получения новых уведомлений от пуш платформы
@property (nonatomic, copy) void (^ _Nullable onPushMessagesReceived)(NSArray<PushNotificationMessage *> * _Nonnull);
/// Обработчик получения новых уведомлений (НЕ от пуш платформы). Необходимо наличие флага PUSH_MESSAGE_TYPE и установленного в нём значения.
@property (nonatomic, copy) void (^ _Nullable appPushMessagesReceived)(NSArray<PushNotificationMessage *> * _Nonnull);
/// Обработчик информации о сообщениях прочитанных на другом устройстве.
@property (nonatomic, copy) void (^ _Nullable onPushMessagesWereRead)(NSArray<NSString *> * _Nonnull);
/// Обработчик информации о сообщениях прочитанных на другом устройстве.
@property (nonatomic, copy) void (^ _Nullable notificationsWereChanged)(BOOL);
@property (nonatomic, copy) void (^ _Nullable failureBlock)(NSString * _Nonnull);
/// DeviceAddress устройства.
@property (nonatomic, readonly, copy) NSString * _Nullable deviceAddress;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Уникальный идентификатор устройства. Генерируется автоматически если в <em>Info.plist</em> стоит флаг PS_NEED_AUTOMATICALLY_GENERATE_DEVICE_UID = YES, eсли PS_NEED_AUTOMATICALLY_GENERATE_DEVICE_UID = NO, тогда <em>deviceUid</em> необходимо выставить до вызова <em>setEnabledPushNotifications(true …)</em>
@property (nonatomic, copy) NSString * _Nullable deviceUid;
@end


@interface PushServerAPI (SWIFT_EXTENSION(MFMSPushLite))
/// Сброс счетчика сообщений.
/// /// [[PushServerAPI default] resetNewMessageCounter:^(PushServerAPIResponse * _Nullable error) {
///
/// }];
///
/// \endcode\param complete callback завершения сброса счетчика
///
- (void)resetNewMessageCounter:(void (^ _Nullable)(PushServerAPIResponse * _Nullable))complete;
@end

@class SendMessageResponse;

@interface PushServerAPI (SWIFT_EXTENSION(MFMSPushLite))
/// Метод отправки сообщений на платформу.
/// /// [[PushServerAPI default] messageSend:@"aaa" systemType:NO complete:^(SendMessageResponse * _Nullable response) {
///
/// }];
///
/// \endcode\param content тело сообщения
///
/// \param systemType true/false системное или не системное сообщение
///
/// \param complete callback о завершение операции
///
- (void)messageSend:(NSString * _Nullable)content systemType:(BOOL)systemType complete:(void (^ _Nullable)(SendMessageResponse * _Nullable))complete;
@end


@interface PushServerAPI (SWIFT_EXTENSION(MFMSPushLite))
/// Возвращает статус подписки на уведомления на push-платформе:
///
/// returns:
/// false Eсли подписка была выключена методом setSubscriptionEnabled, либо никогда не включалась
- (BOOL)isSubscriptionEnabled;
/// Включает/выключает подписку на уведомления на push-платформе
- (void)setSubscriptionEnabled:(BOOL)enabled;
@end


@interface PushServerAPI (SWIFT_EXTENSION(MFMSPushLite))
/// Запрос принудительной синхронизации.
/// Если есть прочитанные на другом устройстве сообщения, не полученные устройством сообщения, тогда отработают соответсвующие коллбэки:
/// <ul>
///   <li>
///     didPushMessagesReceived
///   </li>
///   <li>
///     didPushMessagesWereRead
///   </li>
/// </ul>
/// \param complete callback завершения операции
///
- (void)forceSync:(void (^ _Nullable)(PushServerAPIResponse * _Nullable))complete;
- (void)markMessageAsPushDelivered:(NSDictionary * _Nullable)userInfo complete:(void (^ _Nullable)(void))complete failure:(void (^ _Nullable)(NSString * _Nonnull))failure;
- (void)markMessageAsPushDelivered:(NSArray<NSString *> * _Nonnull)serverMessageId serverId:(NSString * _Nonnull)serverId complete:(void (^ _Nullable)(void))complete failure:(void (^ _Nullable)(NSString * _Nonnull))failure;
/// Метод помечает полученные сообщения как прочитанные пользователем.
/// /// [[PushServerAPI default] markMessagesAsRead:@[self.message.messageId] complete:^(PushServerAPIResponse * _Nullable error) {
///
/// }];
///
/// \endcode\param messagesIds массив Id  сообщений которые нужно пометить как прочитанные
///
/// \param complete self
///
- (void)markMessagesAsRead:(NSArray<NSString *> * _Nonnull)messagesIds complete:(void (^ _Nullable)(PushServerAPIResponse * _Nullable))complete;
@end

@class NSError;

@interface PushServerAPI (SWIFT_EXTENSION(MFMSPushLite))
- (void)didRegisterForRemoteNotificationsWithDeviceToken:(NSData * _Nonnull)deviceToken;
- (void)didReceiveRemoteNotification:(NSDictionary * _Nullable)userInfo;
- (void)didReceiveLocalNotification:(NSDictionary * _Nullable)userInfo;
- (void)didReceiveRemoteNotification:(NSDictionary * _Nullable)userInfo fetchCompletionHandler:(void (^ _Nonnull)(UIBackgroundFetchResult))fetchCompletionHandler;
- (void)handleActionWithIdentifier:(NSString * _Nullable)identifier userInfo:(NSDictionary * _Nonnull)userInfo completion:(void (^ _Nonnull)(void))completion;
- (void)handleActionWithIdentifier:(NSString * _Nullable)identifier userInfo:(NSDictionary * _Nonnull)userInfo responseInfo:(NSDictionary * _Nonnull)responseInfo completion:(void (^ _Nonnull)(void))completion;
- (void)didFailToRegisterForRemoteNotificationsWithError:(NSError * _Nonnull)error;
- (void)didRegisterUserNotificationSettings:(UIUserNotificationSettings * _Nonnull)settings SWIFT_AVAILABILITY(ios,deprecated=10.0,message="Use didUpdateNotificationSettings");
- (void)didUpdateNotificationSettings;
@end




@interface PushServerAPI (SWIFT_EXTENSION(MFMSPushLite))
+ (void)showNetworkActivity:(BOOL)show;
/// Метод для добавления суффикса для идентификатора приложения (используется в определении сертификата для отправки push-уведомлений, в случае если раньше был простой APNS-сертификат). Напр., com.xxx.voip, таким образом полный идентификатор должен совпадать с идентификатором voip-сертификата. Если метод не вызывать, будет использоваться идентификатор приложения (без суффикса). Метод необходимо вызывать в самом начале, где первый раз вызывается PushServerAPI. Напр., [[PushServerAPI default] addVoipSuffixToAppPackage: @”.voip”];.
- (void)addVoipSuffixToAppPackage:(NSString * _Nonnull)suffix;
@end


SWIFT_PROTOCOL("_TtP12MFMSPushLite21PushServerAPIDelegate_")
@protocol PushServerAPIDelegate
@optional
- (BOOL)isProductionWithPushServerAPI:(PushServerAPI * _Nonnull)pushServerAPI SWIFT_WARN_UNUSED_RESULT;
@required
- (id <PushServerApiConfigDataSource> _Nonnull)configWithPushServerAPI:(PushServerAPI * _Nonnull)pushServerAPI;
@optional
- (void)onErrorWithPushServerAPI:(PushServerAPI * _Nonnull)pushServerAPI error:(NSString * _Nonnull)error;
- (void)onDeviceAddressChangedWithPushServerAPI:(PushServerAPI * _Nonnull)pushServerAPI deviceAddress:(NSString * _Nonnull)deviceAddress;
- (void)onPushMessagesReceivedWithPushServerAPI:(PushServerAPI * _Nonnull)pushServerAPI messages:(NSArray<PushNotificationMessage *> * _Nonnull)messages;
@end


SWIFT_PROTOCOL("_TtP12MFMSPushLite23PushServerAPINEDelegate_")
@protocol PushServerAPINEDelegate <PushServerAPIDelegate>
- (NSString * _Nullable)deviceAddressWithPushServerAPI:(PushServerAPI * _Nonnull)pushServerAPI;
@end


/// <h1>PushServerAPIResponse</h1>
/// Стандартный response от сервера (Base Class).
SWIFT_CLASS("_TtC12MFMSPushLite21PushServerAPIResponse")
@interface PushServerAPIResponse : NSObject
/// Инициалиция объекта
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// При возникновение каких либо ошибок сетевого взаимодействия или некорректной передаче параметров методу,
/// <em>errorCode</em> выставляется больше <em>0</em>. Если ошибок нет, тогда либо равен <em>nil</em> либо <em>errorCode = 0</em>.
@property (nonatomic) int32_t errorCode;
/// Описание ошибки.
@property (nonatomic, copy) NSString * _Nullable errorDescription;
/// Стандартное описание объекта, наследника от <em>NSObject</em>
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Стандартное описание, для вывода информации с помощью <em>LLDB</em> дебагера.
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@end


SWIFT_PROTOCOL("_TtP12MFMSPushLite29PushServerApiConfigDataSource_")
@protocol PushServerApiConfigDataSource
@property (nonatomic, readonly, copy) NSString * _Nullable providerUid;
@property (nonatomic, readonly) BOOL needAutomaticallyGenerateDeviceUid;
@property (nonatomic, readonly, copy) NSString * _Nullable primaryUrlCode;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nonnull urls;
@end


SWIFT_CLASS("_TtC12MFMSPushLite19PushServerApiConfig")
@interface PushServerApiConfig : NSObject <PushServerApiConfigDataSource>
@property (nonatomic, copy) NSString * _Nullable providerUid;
@property (nonatomic) BOOL needAutomaticallyGenerateDeviceUid;
@property (nonatomic, copy) NSString * _Nullable primaryUrlCode;
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nonnull urls;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC12MFMSPushLite19SendMessageResponse")
@interface SendMessageResponse : PushServerAPIResponse
@property (nonatomic, copy) NSString * _Nullable messageId;
@property (nonatomic, strong) NSNumber * _Nullable sentAt;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#endif

#endif
